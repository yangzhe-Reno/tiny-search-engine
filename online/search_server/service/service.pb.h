// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#ifndef PROTOBUF_INCLUDED_service_2eproto
#define PROTOBUF_INCLUDED_service_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_service_2eproto 

namespace protobuf_service_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_service_2eproto
namespace NLP {
class SearchHotRequest;
class SearchHotRequestDefaultTypeInternal;
extern SearchHotRequestDefaultTypeInternal _SearchHotRequest_default_instance_;
class SearchHotResponse;
class SearchHotResponseDefaultTypeInternal;
extern SearchHotResponseDefaultTypeInternal _SearchHotResponse_default_instance_;
class SearchRequest;
class SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class SearchResItem;
class SearchResItemDefaultTypeInternal;
extern SearchResItemDefaultTypeInternal _SearchResItem_default_instance_;
class SearchResponse;
class SearchResponseDefaultTypeInternal;
extern SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
}  // namespace NLP
namespace google {
namespace protobuf {
template<> ::NLP::SearchHotRequest* Arena::CreateMaybeMessage<::NLP::SearchHotRequest>(Arena*);
template<> ::NLP::SearchHotResponse* Arena::CreateMaybeMessage<::NLP::SearchHotResponse>(Arena*);
template<> ::NLP::SearchRequest* Arena::CreateMaybeMessage<::NLP::SearchRequest>(Arena*);
template<> ::NLP::SearchResItem* Arena::CreateMaybeMessage<::NLP::SearchResItem>(Arena*);
template<> ::NLP::SearchResponse* Arena::CreateMaybeMessage<::NLP::SearchResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace NLP {

// ===================================================================

class SearchRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NLP.SearchRequest) */ {
 public:
  SearchRequest();
  virtual ~SearchRequest();

  SearchRequest(const SearchRequest& from);

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SearchRequest* other);
  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchRequest* New() const final {
    return CreateMaybeMessage<SearchRequest>(NULL);
  }

  SearchRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchRequest& from);
  void MergeFrom(const SearchRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string query = 1;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:NLP.SearchRequest)
 private:
  void set_has_query();
  void clear_has_query();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  friend struct ::protobuf_service_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchResItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NLP.SearchResItem) */ {
 public:
  SearchResItem();
  virtual ~SearchResItem();

  SearchResItem(const SearchResItem& from);

  inline SearchResItem& operator=(const SearchResItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchResItem(SearchResItem&& from) noexcept
    : SearchResItem() {
    *this = ::std::move(from);
  }

  inline SearchResItem& operator=(SearchResItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchResItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchResItem* internal_default_instance() {
    return reinterpret_cast<const SearchResItem*>(
               &_SearchResItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SearchResItem* other);
  friend void swap(SearchResItem& a, SearchResItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchResItem* New() const final {
    return CreateMaybeMessage<SearchResItem>(NULL);
  }

  SearchResItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchResItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchResItem& from);
  void MergeFrom(const SearchResItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string title = 2;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // required string url = 3;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 3;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // required int32 DocId = 1;
  bool has_docid() const;
  void clear_docid();
  static const int kDocIdFieldNumber = 1;
  ::google::protobuf::int32 docid() const;
  void set_docid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NLP.SearchResItem)
 private:
  void set_has_docid();
  void clear_has_docid();
  void set_has_title();
  void clear_has_title();
  void set_has_url();
  void clear_has_url();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::int32 docid_;
  friend struct ::protobuf_service_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NLP.SearchResponse) */ {
 public:
  SearchResponse();
  virtual ~SearchResponse();

  SearchResponse(const SearchResponse& from);

  inline SearchResponse& operator=(const SearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchResponse(SearchResponse&& from) noexcept
    : SearchResponse() {
    *this = ::std::move(from);
  }

  inline SearchResponse& operator=(SearchResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchResponse* internal_default_instance() {
    return reinterpret_cast<const SearchResponse*>(
               &_SearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SearchResponse* other);
  friend void swap(SearchResponse& a, SearchResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchResponse* New() const final {
    return CreateMaybeMessage<SearchResponse>(NULL);
  }

  SearchResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchResponse& from);
  void MergeFrom(const SearchResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NLP.SearchResItem result = 1;
  int result_size() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::NLP::SearchResItem* mutable_result(int index);
  ::google::protobuf::RepeatedPtrField< ::NLP::SearchResItem >*
      mutable_result();
  const ::NLP::SearchResItem& result(int index) const;
  ::NLP::SearchResItem* add_result();
  const ::google::protobuf::RepeatedPtrField< ::NLP::SearchResItem >&
      result() const;

  // @@protoc_insertion_point(class_scope:NLP.SearchResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NLP::SearchResItem > result_;
  friend struct ::protobuf_service_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchHotRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NLP.SearchHotRequest) */ {
 public:
  SearchHotRequest();
  virtual ~SearchHotRequest();

  SearchHotRequest(const SearchHotRequest& from);

  inline SearchHotRequest& operator=(const SearchHotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchHotRequest(SearchHotRequest&& from) noexcept
    : SearchHotRequest() {
    *this = ::std::move(from);
  }

  inline SearchHotRequest& operator=(SearchHotRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchHotRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchHotRequest* internal_default_instance() {
    return reinterpret_cast<const SearchHotRequest*>(
               &_SearchHotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SearchHotRequest* other);
  friend void swap(SearchHotRequest& a, SearchHotRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchHotRequest* New() const final {
    return CreateMaybeMessage<SearchHotRequest>(NULL);
  }

  SearchHotRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchHotRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchHotRequest& from);
  void MergeFrom(const SearchHotRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchHotRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:NLP.SearchHotRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_service_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchHotResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NLP.SearchHotResponse) */ {
 public:
  SearchHotResponse();
  virtual ~SearchHotResponse();

  SearchHotResponse(const SearchHotResponse& from);

  inline SearchHotResponse& operator=(const SearchHotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchHotResponse(SearchHotResponse&& from) noexcept
    : SearchHotResponse() {
    *this = ::std::move(from);
  }

  inline SearchHotResponse& operator=(SearchHotResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchHotResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchHotResponse* internal_default_instance() {
    return reinterpret_cast<const SearchHotResponse*>(
               &_SearchHotResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SearchHotResponse* other);
  friend void swap(SearchHotResponse& a, SearchHotResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchHotResponse* New() const final {
    return CreateMaybeMessage<SearchHotResponse>(NULL);
  }

  SearchHotResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchHotResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchHotResponse& from);
  void MergeFrom(const SearchHotResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchHotResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string result = 1;
  int result_size() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  const ::std::string& result(int index) const;
  ::std::string* mutable_result(int index);
  void set_result(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_result(int index, ::std::string&& value);
  #endif
  void set_result(int index, const char* value);
  void set_result(int index, const char* value, size_t size);
  ::std::string* add_result();
  void add_result(const ::std::string& value);
  #if LANG_CXX11
  void add_result(::std::string&& value);
  #endif
  void add_result(const char* value);
  void add_result(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& result() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_result();

  // @@protoc_insertion_point(class_scope:NLP.SearchHotResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> result_;
  friend struct ::protobuf_service_2eproto::TableStruct;
};
// ===================================================================

class SearchService_Stub;

class SearchService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline SearchService() {};
 public:
  virtual ~SearchService();

  typedef SearchService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void query(::google::protobuf::RpcController* controller,
                       const ::NLP::SearchRequest* request,
                       ::NLP::SearchResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void hot(::google::protobuf::RpcController* controller,
                       const ::NLP::SearchHotRequest* request,
                       ::NLP::SearchHotResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SearchService);
};

class SearchService_Stub : public SearchService {
 public:
  SearchService_Stub(::google::protobuf::RpcChannel* channel);
  SearchService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~SearchService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements SearchService ------------------------------------------

  void query(::google::protobuf::RpcController* controller,
                       const ::NLP::SearchRequest* request,
                       ::NLP::SearchResponse* response,
                       ::google::protobuf::Closure* done);
  void hot(::google::protobuf::RpcController* controller,
                       const ::NLP::SearchHotRequest* request,
                       ::NLP::SearchHotResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SearchService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SearchRequest

// required string query = 1;
inline bool SearchRequest::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchRequest::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchRequest::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchRequest::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
inline const ::std::string& SearchRequest::query() const {
  // @@protoc_insertion_point(field_get:NLP.SearchRequest.query)
  return query_.GetNoArena();
}
inline void SearchRequest::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NLP.SearchRequest.query)
}
#if LANG_CXX11
inline void SearchRequest::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NLP.SearchRequest.query)
}
#endif
inline void SearchRequest::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NLP.SearchRequest.query)
}
inline void SearchRequest::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NLP.SearchRequest.query)
}
inline ::std::string* SearchRequest::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:NLP.SearchRequest.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchRequest::release_query() {
  // @@protoc_insertion_point(field_release:NLP.SearchRequest.query)
  if (!has_query()) {
    return NULL;
  }
  clear_has_query();
  return query_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRequest::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:NLP.SearchRequest.query)
}

// -------------------------------------------------------------------

// SearchResItem

// required int32 DocId = 1;
inline bool SearchResItem::has_docid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SearchResItem::set_has_docid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SearchResItem::clear_has_docid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SearchResItem::clear_docid() {
  docid_ = 0;
  clear_has_docid();
}
inline ::google::protobuf::int32 SearchResItem::docid() const {
  // @@protoc_insertion_point(field_get:NLP.SearchResItem.DocId)
  return docid_;
}
inline void SearchResItem::set_docid(::google::protobuf::int32 value) {
  set_has_docid();
  docid_ = value;
  // @@protoc_insertion_point(field_set:NLP.SearchResItem.DocId)
}

// required string title = 2;
inline bool SearchResItem::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchResItem::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchResItem::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchResItem::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& SearchResItem::title() const {
  // @@protoc_insertion_point(field_get:NLP.SearchResItem.title)
  return title_.GetNoArena();
}
inline void SearchResItem::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NLP.SearchResItem.title)
}
#if LANG_CXX11
inline void SearchResItem::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NLP.SearchResItem.title)
}
#endif
inline void SearchResItem::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NLP.SearchResItem.title)
}
inline void SearchResItem::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NLP.SearchResItem.title)
}
inline ::std::string* SearchResItem::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:NLP.SearchResItem.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchResItem::release_title() {
  // @@protoc_insertion_point(field_release:NLP.SearchResItem.title)
  if (!has_title()) {
    return NULL;
  }
  clear_has_title();
  return title_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchResItem::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:NLP.SearchResItem.title)
}

// required string url = 3;
inline bool SearchResItem::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SearchResItem::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SearchResItem::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SearchResItem::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& SearchResItem::url() const {
  // @@protoc_insertion_point(field_get:NLP.SearchResItem.url)
  return url_.GetNoArena();
}
inline void SearchResItem::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NLP.SearchResItem.url)
}
#if LANG_CXX11
inline void SearchResItem::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NLP.SearchResItem.url)
}
#endif
inline void SearchResItem::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NLP.SearchResItem.url)
}
inline void SearchResItem::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NLP.SearchResItem.url)
}
inline ::std::string* SearchResItem::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:NLP.SearchResItem.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchResItem::release_url() {
  // @@protoc_insertion_point(field_release:NLP.SearchResItem.url)
  if (!has_url()) {
    return NULL;
  }
  clear_has_url();
  return url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchResItem::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:NLP.SearchResItem.url)
}

// -------------------------------------------------------------------

// SearchResponse

// repeated .NLP.SearchResItem result = 1;
inline int SearchResponse::result_size() const {
  return result_.size();
}
inline void SearchResponse::clear_result() {
  result_.Clear();
}
inline ::NLP::SearchResItem* SearchResponse::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:NLP.SearchResponse.result)
  return result_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NLP::SearchResItem >*
SearchResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:NLP.SearchResponse.result)
  return &result_;
}
inline const ::NLP::SearchResItem& SearchResponse::result(int index) const {
  // @@protoc_insertion_point(field_get:NLP.SearchResponse.result)
  return result_.Get(index);
}
inline ::NLP::SearchResItem* SearchResponse::add_result() {
  // @@protoc_insertion_point(field_add:NLP.SearchResponse.result)
  return result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NLP::SearchResItem >&
SearchResponse::result() const {
  // @@protoc_insertion_point(field_list:NLP.SearchResponse.result)
  return result_;
}

// -------------------------------------------------------------------

// SearchHotRequest

// -------------------------------------------------------------------

// SearchHotResponse

// repeated string result = 1;
inline int SearchHotResponse::result_size() const {
  return result_.size();
}
inline void SearchHotResponse::clear_result() {
  result_.Clear();
}
inline const ::std::string& SearchHotResponse::result(int index) const {
  // @@protoc_insertion_point(field_get:NLP.SearchHotResponse.result)
  return result_.Get(index);
}
inline ::std::string* SearchHotResponse::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:NLP.SearchHotResponse.result)
  return result_.Mutable(index);
}
inline void SearchHotResponse::set_result(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NLP.SearchHotResponse.result)
  result_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SearchHotResponse::set_result(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NLP.SearchHotResponse.result)
  result_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SearchHotResponse::set_result(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  result_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NLP.SearchHotResponse.result)
}
inline void SearchHotResponse::set_result(int index, const char* value, size_t size) {
  result_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NLP.SearchHotResponse.result)
}
inline ::std::string* SearchHotResponse::add_result() {
  // @@protoc_insertion_point(field_add_mutable:NLP.SearchHotResponse.result)
  return result_.Add();
}
inline void SearchHotResponse::add_result(const ::std::string& value) {
  result_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NLP.SearchHotResponse.result)
}
#if LANG_CXX11
inline void SearchHotResponse::add_result(::std::string&& value) {
  result_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NLP.SearchHotResponse.result)
}
#endif
inline void SearchHotResponse::add_result(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  result_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NLP.SearchHotResponse.result)
}
inline void SearchHotResponse::add_result(const char* value, size_t size) {
  result_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NLP.SearchHotResponse.result)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchHotResponse::result() const {
  // @@protoc_insertion_point(field_list:NLP.SearchHotResponse.result)
  return result_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SearchHotResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:NLP.SearchHotResponse.result)
  return &result_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NLP

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_service_2eproto
